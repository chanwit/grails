การพัฒนาเวบด้วยจาวาในปัจจุบันมีความซับซ้อนเกินกว่าที่มันควรจะเป็น เวบเฟรมเวิร์ครุ่นใหม่ ๆ ในโลกของจาวาก็ซับซ้อนยุ่งยากเกินไปและไม่เป็นไปตามหลักการดราย (DRY - Don't Repeat Yourself)

เฟรมเวิร์คประเภทไดนามิค เช่น เรลส์ จังโก้ หรือ เทอร์โบเกียร์ส ช่วยเปิดทางสู่วิธีการคิดแบบใหม่สำหรับพัฒนาเวบแอพพลิเคชั่น  เกรลส์สร้างขึ้นบนแนวคิดดังกล่าวและลดความซับซ้อนของการสร้างเวบแอพพลิเคชั่นบนจาวาแพล็ตฟอร์มไปอย่างมาก จุดที่ทำให้เกรลส์ต่างออกไปก็คือเกรลส์นั้นสร้างขึ้นจากแนวคิดที่กล่าวมาบนเทคโนโลยีที่มีอยู่แล้วอย่าง Spring และ Hibernate

เกรลส์เป็นเฟรมเวิร์คที่มีครบทุกชั้น (full stack) และพยายามที่จะแก้ปัญหาของการพัฒนาเวบแอพพลิเคชั่นให้ได้มากที่สุดด้วย คอร์เทคโนโลยีและระบบปลั๊กอินที่มีมาด้วย เกรลส์มากับความสามารถต่อไปนี้แบบแกะกล่อง :

* ระบบช่วยในการแม็พ อ็อบเจ็ค-รีเลชั่นแนล ที่ง่ายต่อการใช้งาน ซึ่งพัฒนาต่อจาก [Hibernate|http://www.hibernate.org]
* An expressive view technology called Groovy Server Pages (GSP)
* A controller layer built on "Spring":http://www.springframework.org MVC                                 
* A command line scripting environment built on the Groovy-powered "Gant":http://groovy.codehaus.org/Gant
* An embedded Jetty container which is configured for on the fly reloading
* Dependency injection with the inbuilt "Spring":http://www.springframework.org container
* Support for internationalization (i18n) built on Spring's core MessageSource concept
* A transactional service layer built on Spring's transaction abstraction

All of these are made easy to use through the power of the "Groovy":http://groovy.codehaus.org language and the extensive use of Domain Specific Languages (DSLs)

This documentation will take you through getting started with Grails and building web applications with the Grails framework. 